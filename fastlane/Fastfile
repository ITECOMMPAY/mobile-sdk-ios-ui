origin_branch = "origin/master"
owner_name = "Etoedto-1"
destinations_group = "Collaborators"
app_name = "ECP-SDK2-iOS"
target = "EtoedtoSample"
lib_target = "EtoedtoSDK"
app_identifier = 'com.etoedto.sdk.testclient'

default_platform(:ios)
platform :ios do

  desc "Validate build"
  lane :validate do |options|
    # Clean up derived data to ensure fresh build
    clear_derived_data
    
    # Explicitly resolve SPM packages
    sh("xcodebuild -resolvePackageDependencies -workspace ../mobileSDK.xcworkspace -scheme #{target}")
    
    build_ios_app(
      workspace: 'mobileSDK.xcworkspace',
      scheme: target,
      configuration: 'Release',
      destination: 'generic/platform=iOS Simulator',
      clean: true,
      suppress_xcode_output: false,
      output_directory: 'archives',
      output_name: "#{target}.ipa",
      export_method: 'validation',
      skip_archive: true,
      skip_codesigning: true
    )
  end  

  desc "Upload Test application to Appсenter"
  lane :appcenter do |options|
    skip_docs
    ensure_git_status_clean(
        show_uncommitted_changes: true,
        show_diff: true
    )
    
    #parse tags to array
    contains_command_result = sh(command: "git tag --points-at")
    current_commit_tags_list = contains_command_result.split(/\n/)
    first_tag = current_commit_tags_list.first

    current_branch_name = git_branch
    if current_branch_name == "dev"
        UI.user_error!("You are on developer branch. You can only create feature branch")
    end
    m = current_branch_name.scan(/MSDK-\d+/)
    if m.length() == 0 && first_tag.nil?
        UI.user_error!("Name of the branch is wrong or need set TAG. You can use like MSDK-1234...")
    end
    task_name = first_tag.nil? ? current_branch_name.scan(/MSDK-\d+/)[0] : first_tag
    UI.success("Task name is #{task_name}")

    last_appcenter_version = appcenter_fetch_version_number(
      api_token: ENV["APPCENTER_TOKEN"],
      owner_name: owner_name,
      app_name: app_name
    )

    build_version = 1
    begin
        build_version = last_appcenter_version["build_number"].to_i
        UI.success("Last build number from appcenter is #{build_version}")
        build_version = build_version + 1
    rescue Exception => e
    end
   

    increment_build_number(
      build_number: build_version,
      skip_info_plist: true,
      xcodeproj: "./mobileSDK.SampleApp/mobileSDK.SampleApp.xcodeproj" 
    )
    increment_version_number_in_xcodeproj(
      version_number: task_name,
      target: target,
      xcodeproj: "./mobileSDK.SampleApp/mobileSDK.SampleApp.xcodeproj"
    )

    build_ios_app(
      workspace: 'mobileSDK.xcworkspace',
      scheme: target,
      configuration: 'Release',
      clean: true,
      suppress_xcode_output: false,
      output_directory: 'archives',
      output_name: "#{target}.ipa",
      export_method: 'ad-hoc'
    )

    changelog = changelog_from_git_commits(
      quiet: true,
      merge_commit_filtering: "exclude_merges",
      between: ["origin/dev", "HEAD"],
      pretty: "- (%ae) %s"
    )

    commit = last_git_commit
    release_notes = "Build from\r\n\r\nCommit: #{commit[:commit_hash]}\r\n\r\nCommits:\r\n#{changelog}"

    appcenter_upload(
      api_token: ENV["APPCENTER_TOKEN"],
      ipa: "./archives/#{target}.ipa",
      owner_name: owner_name,
      app_name: app_name,
      destinations: destinations_group,
      release_notes: release_notes,
      notify_testers: false
    )

    reset_git_repo(force: true)

  end

end